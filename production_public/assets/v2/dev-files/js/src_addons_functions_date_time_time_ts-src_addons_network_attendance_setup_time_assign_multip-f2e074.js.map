{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_addons_functions_date_time_time_ts-src_addons_network_attendance_setup_time_assign_multip-f2e074.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/date_time/time.ts","webpack://webpackNumbers/./src/addons/network/attendance/setup/time/assign_multiple.ts","webpack://webpackNumbers/./src/addons/network/attendance/setup/time/delete.ts","webpack://webpackNumbers/./src/addons/network/attendance/setup/time/patch.ts"],"sourcesContent":["export const getTime = (time: Date) => {\r\n  \r\n  const __time = new Date(),\r\n    _DateString = `${__time.getFullYear()}/${__time.getMonth()+1}/${__time.getDate()} ${time}`;\r\n  \r\n  console.log({time, __time, _DateString});\r\n  \r\n  \r\n  let _time = new Date(_DateString);\r\n  // console.log({\"time\": time, \"__time\": __time, \"__time.getDate()\": __time.getDate(), \"_DateString\": _DateString, \"_time\": _time})\r\n  return _time;\r\n}\r\n\r\nexport const getLocalTime = (time: Date, options?: Intl.DateTimeFormatOptions) => {\r\n  // console.log({time});\r\n  \r\n  return time === undefined? \"-\": time.toLocaleTimeString('en-US', options);\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\nimport { MeetingEventTimeFormModel } from \"@@addons/interfaces/attendance/meeting_event/schedules/times\";\r\n\r\n\r\nexport async function POST_AttendanceAddScheduleTimesBulk(timeData: MeetingEventTimeFormModel,): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  console.log({ timeData });\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/time/bulk',\r\n    formData = {\r\n      \"meetingEventId\": timeData.meetingEventId,\r\n      \"times\": timeData.times.map(time => {\r\n        return {\r\n          \"startTime\": time.startTime ?? \"\",\r\n          \"endTime\": time.endTime ?? \"\"\r\n        }\r\n      }),\r\n    };\r\n\r\n  return Swal.fire({\r\n    title: 'Add Extra Time(s)?',\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, true, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        try {\r\n          const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false);\r\n          return networkCallRes;\r\n        } catch (error) {\r\n          console.error({ error });\r\n          let errorHttp = HTTP;\r\n          errorHttp['error'] = error;\r\n          const networkCallRes = new NetWorkCallResponses(\"post\", errorHttp, true);\r\n          networkCallRes.postForm\r\n          return networkCallRes;\r\n        }\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: '#f97817',\r\n        confirmButtonColor: '#f97817',\r\n      });\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function DELETE_AttendanceDeleteScheduleTime(meetingEventTimeId: Number,): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/time/' + meetingEventTimeId,\r\n    formData = {};\r\n\r\n  return Swal.fire({\r\n    title: 'Remove Time?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n          method: \"DELETE\",\r\n          body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        try {\r\n          const networkCallRes = new NetWorkCallResponses(\"delete\", HTTP, false);\r\n          const _RESPONSE = networkCallRes.response;\r\n          if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n            if (_RESPONSE.unknownError.length > 0) {\r\n              // console.log({\"_RESPONSE.unknownError\": _RESPONSE.unknownError});\r\n\r\n              let errors: Array<{ error: string }> = [];\r\n              _RESPONSE.unknownError.forEach(e => {\r\n                const _errors = e.errors;\r\n                _errors.forEach(err => {\r\n                  errors.push({ error: err });\r\n                });\r\n              });\r\n\r\n              const res = https_swal_error_format(errors);\r\n              Swal.showValidationMessage(\r\n                `${res}`\r\n              );\r\n            }\r\n          }\r\n          return networkCallRes;\r\n        } catch (error) {\r\n          console.error({ error });\r\n          let errorHttp = HTTP;\r\n          errorHttp['error'] = error;\r\n          const networkCallRes = new NetWorkCallResponses(\"delete\", errorHttp, true);\r\n          networkCallRes.postForm\r\n          return networkCallRes;\r\n        }\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess? 'success': 'error',\r\n        iconColor: '#f97817',\r\n        confirmButtonColor: '#f97817',\r\n      });\r\n      isSuccess? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500): null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PATCH_AttendanceAddScheduleTime(ID: Number, startTime: String, endTime: String): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/time/' + ID,\r\n    formData = {\r\n      \"startTime\": startTime ?? \"\",\r\n      \"endTime\": endTime ?? \"\"\r\n    };\r\n\r\n  return Swal.fire({\r\n    title: 'Update Time Data?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, true, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}"],"names":["getTime","time","__time","Date","_DateString","getFullYear","getMonth","getDate","console","log","getLocalTime","options","undefined","toLocaleTimeString","POST_AttendanceAddScheduleTimesBulk","timeData","_get_cookie","getUserLoginInfoCookie","url","CONSTANTS","URLS","AKWAABA_API_BASE_URL","formData","meetingEventId","times","map","startTime","endTime","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","http","method","body","JSON","stringify","headers","Authorization","token","then","HTTP","NetWorkCallResponses","error","errorHttp","networkCallRes","postForm","catch","String","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","value","Object","VALUE","response","message","success","setTimeout","window","location","reload","DELETE_AttendanceDeleteScheduleTime","meetingEventTimeId","_RESPONSE","unknownError","length","errors","forEach","e","err","push","res","https_swal_error_format","PATCH_AttendanceAddScheduleTime","ID","errormsg","id"],"sourceRoot":""}