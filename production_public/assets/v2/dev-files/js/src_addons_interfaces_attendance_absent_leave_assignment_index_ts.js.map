{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_addons_interfaces_attendance_absent_leave_assignment_index_ts.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/interfaces/attendance/absent_leave/assignment/index.ts","webpack://webpackNumbers/./src/addons/interfaces/attendance/absent_leave/status/index.ts","webpack://webpackNumbers/./src/addons/interfaces/clients/users/model/index.ts","webpack://webpackNumbers/./src/addons/interfaces/members/additional_info/index.ts"],"sourcesContent":["// To parse this data:\n//\n//   import { Convert, AttendanceAbsentLeaveAssignmentModel } from \"./file\";\n//\n//   const attendanceAbsentLeaveAssignmentModel = Convert.toAttendanceAbsentLeaveAssignmentModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nimport { ClientInfoModel, typeMap as cimTypeMap } from \"@@addons/interfaces/clients/client\";\nimport { ClientUserModel, typeMap as cumTypeMap } from \"@@addons/interfaces/clients/users/model\";\nimport { MembershipAdditionalInfoModel, typeMap as maimTypeMap } from \"@@addons/interfaces/members/additional_info\";\nimport { MembershipMixedUserModel, typeMap as mmumTypeMap } from \"@@addons/interfaces/members/user/mixed\";\nimport { AttendanceAbsentLeaveStatusModel, typeMap as aalsmTypeMap } from \"../status\";\nimport { typeMap as cmTypeMap } from \"@@addons/interfaces/location/country_model\";\nimport { typeMap as cacmTypeMap } from \"@@addons/interfaces/clients/account_category\";\n\nexport interface AttendanceAbsentLeaveAssignmentModel {\n    id?:                   number;\n    clientID?:             number;\n    clientInfo?:           ClientInfoModel;\n    memberID?:             number;\n    memberInfo?:           MembershipMixedUserModel;\n    statusID?:             AttendanceAbsentLeaveStatusModel;\n    createdBy?:            number;\n    createdByInfo?:        ClientUserModel;\n    updatedBy?:            number;\n    updatedByInfo?:        ClientUserModel;\n    state?:                StateTerm;\n    term?:                 StateTerm;\n    fromDate?:             Date;\n    toDate?:               Date;\n    reason?:               string;\n    totalDays?:            number;\n    totalDaysLeft?:        number;\n    memberAdditionalInfo?: MembershipAdditionalInfoModel;\n    date?:                 Date;\n    updateDate?:           Date;\n}\n\nexport interface StateTerm {\n    id?:   number;\n    name?: string;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toAttendanceAbsentLeaveAssignmentModel(json: string): AttendanceAbsentLeaveAssignmentModel {\n        return cast(JSON.parse(json), r(\"AttendanceAbsentLeaveAssignmentModel\"));\n    }\n\n    public static attendanceAbsentLeaveAssignmentModelToJson(value: AttendanceAbsentLeaveAssignmentModel): string {\n        return JSON.stringify(uncast(value, r(\"AttendanceAbsentLeaveAssignmentModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        // console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    // console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"AttendanceAbsentLeaveAssignmentModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"clientInfo\", js: \"clientInfo\", typ: u(null, r(\"ClientInfoModel\")) },\n        { json: \"memberId\", js: \"memberID\", typ: u(null, 0) },\n        { json: \"memberInfo\", js: \"memberInfo\", typ: u(null, r(\"MembershipMixedUserModel\")) },\n        { json: \"statusId\", js: \"statusID\", typ: u(null, r(\"AttendanceAbsentLeaveStatusModel\")) },\n        { json: \"createdBy\", js: \"createdBy\", typ: u(null, 0) },\n        { json: \"createdByInfo\", js: \"createdByInfo\", typ: u(null, r(\"ClientUserModel\")) },\n        { json: \"updatedBy\", js: \"updatedBy\", typ: u(null, 0) },\n        { json: \"updatedByInfo\", js: \"updatedByInfo\", typ: u(null, r(\"ClientUserModel\")) },\n        { json: \"state\", js: \"state\", typ: u(null, r(\"StateTerm\")) },\n        { json: \"term\", js: \"term\", typ: u(null, r(\"StateTerm\")) },\n        { json: \"fromDate\", js: \"fromDate\", typ: u(null, Date) },\n        { json: \"toDate\", js: \"toDate\", typ: u(null, Date) },\n        { json: \"reason\", js: \"reason\", typ: u(null, \"\") },\n        { json: \"totalDays\", js: \"totalDays\", typ: u(null, 0) },\n        { json: \"totalDaysLeft\", js: \"totalDaysLeft\", typ: u(null, 0) },\n        { json: \"memberAdditionalInfo\", js: \"memberAdditionalInfo\", typ: u(null, r(\"MemberAdditionalInfo\")) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n        { json: \"updateDate\", js: \"updateDate\", typ: u(null, Date) },\n    ], false),\n    \"ClientInfoModel\": cimTypeMap['ClientInfoModel'],\n    \"MembershipMixedUserModel\": mmumTypeMap['MembershipMixedUserModel'],\n    \"GroupingsMemberCategoryModel\": mmumTypeMap['GroupingsMemberCategoryModel'],\n    \"BranchInfo\": mmumTypeMap['BranchInfo'],\n    \"GroupingsOrganizationTypeModel\": mmumTypeMap['GroupingsOrganizationTypeModel'],\n    \"Certificate\": mmumTypeMap['Certificate'],\n    \"Attachment\": mmumTypeMap['Attachment'],\n    \"FolderID\": mmumTypeMap['FolderID'],\n    \"RegionInfo\": mmumTypeMap['RegionInfo'],\n    \"CountryInfo\": mmumTypeMap['CountryInfo'],\n    \"DistrictConstituencyElectoralAreaInfo\": mmumTypeMap['DistrictConstituencyElectoralAreaInfo'],\n    \"AttendanceAbsentLeaveStatusModel\": aalsmTypeMap['AttendanceAbsentLeaveStatusModel'],\n    \"ClientUserModel\": cumTypeMap['ClientUserModel'],\n    \"MemberAdditionalInfo\": maimTypeMap['MemberAdditionalInfo'],\n    \"StateTerm\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"name\", js: \"name\", typ: u(null, \"\") },\n    ], false),\n    \"LocationCountryModel\": cmTypeMap['LocationCountryModel'],\n    \"ClientAccountCategoryModel\": cacmTypeMap['ClientAccountCategoryModel'],\n};\n","// To parse this data:\n//\n//   import { Convert, AttendanceAbsentLeaveStatusModel } from \"./file\";\n//\n//   const attendanceAbsentLeaveStatusModel = Convert.toAttendanceAbsentLeaveStatusModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface AttendanceAbsentLeaveStatusModel {\n    id?:       number;\n    clientID?: number;\n    branchID?: number;\n    status?:   string;\n    date?:     Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toAttendanceAbsentLeaveStatusModel(json: string): AttendanceAbsentLeaveStatusModel {\n        return cast(JSON.parse(json), r(\"AttendanceAbsentLeaveStatusModel\"));\n    }\n\n    public static attendanceAbsentLeaveStatusModelToJson(value: AttendanceAbsentLeaveStatusModel): string {\n        return JSON.stringify(uncast(value, r(\"AttendanceAbsentLeaveStatusModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        // console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    // console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"AttendanceAbsentLeaveStatusModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"clientId\", js: \"clientID\", typ: u(null, 0) },\n        { json: \"branchId\", js: \"branchID\", typ: u(null, 0) },\n        { json: \"status\", js: \"status\", typ: u(null, \"\") },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, ClientUserModel } from \"./file\";\n//\n//   const clientUserModel = Convert.toClientUserModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface ClientUserModel {\n    id?:             number;\n    firstname?:      string;\n    surname?:        string;\n    gender?:         number;\n    profilePicture?: string;\n    dateOfBirth?:    Date;\n    phone?:          string;\n    email?:          string;\n    role?:           number;\n    accountID?:      number;\n    branchID?:       number;\n    level?:          number;\n    status?:         number;\n    lastUpdatedBy?:  number;\n    date?:           Date;\n    lastLogin?:      Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toClientUserModel(json: string): ClientUserModel {\n        return cast(JSON.parse(json), r(\"ClientUserModel\"));\n    }\n\n    public static clientUserModelToJson(value: ClientUserModel): string {\n        return JSON.stringify(uncast(value, r(\"ClientUserModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        // console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    // console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"ClientUserModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"firstname\", js: \"firstname\", typ: u(null, \"\") },\n        { json: \"surname\", js: \"surname\", typ: u(null, \"\") },\n        { json: \"gender\", js: \"gender\", typ: u(null, 0) },\n        { json: \"profilePicture\", js: \"profilePicture\", typ: u(null, \"\") },\n        { json: \"dateOfBirth\", js: \"dateOfBirth\", typ: u(null, Date) },\n        { json: \"phone\", js: \"phone\", typ: u(null, \"\") },\n        { json: \"email\", js: \"email\", typ: u(null, \"\") },\n        { json: \"role\", js: \"role\", typ: u(null, 0) },\n        { json: \"accountId\", js: \"accountID\", typ: u(null, 0) },\n        { json: \"branchId\", js: \"branchID\", typ: u(null, 0) },\n        { json: \"level\", js: \"level\", typ: u(null, 0) },\n        { json: \"status\", js: \"status\", typ: u(null, 0) },\n        { json: \"lastUpdatedBy\", js: \"lastUpdatedBy\", typ: u(null, 0) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n        { json: \"last_login\", js: \"lastLogin\", typ: u(null, Date) },\n    ], false),\n};\n","// To parse this data:\n//\n//   import { Convert, MembershipAdditionalInfoModel } from \"./file\";\n//\n//   const membershipAdditionalInfoModel = Convert.toMembershipAdditionalInfoModel(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\nimport { MembershipMixedUserModel, typeMap as mmumTypeMap } from \"@@addons/interfaces/members/user/mixed\";\n\nexport interface MembershipAdditionalInfoModel {\n    id?:                  number;\n    memberID?:            number;\n    memberInfo?:          MembershipMixedUserModel;\n    phone?:               string;\n    email?:               string;\n    placeOfWork?:         string;\n    whatsapp?:            string;\n    facebook?:            string;\n    twitter?:             string;\n    instagram?:           string;\n    accountBio?:          string;\n    businessHashtag?:     string;\n    businessDescription?: string;\n    profession?:          string;\n    website?:             string;\n    postalAddress?:       string;\n    digitalAddress?:      string;\n    dateJoined?:          Date;\n    date?:                Date;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toMembershipAdditionalInfoModel(json: string): MembershipAdditionalInfoModel {\n        return cast(JSON.parse(json), r(\"MembershipAdditionalInfoModel\"));\n    }\n\n    public static membershipAdditionalInfoModelToJson(value: MembershipAdditionalInfoModel): string {\n        return JSON.stringify(uncast(value, r(\"MembershipAdditionalInfoModel\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any = '') {\n    if (key) {\n        // console.error(`Invalid value for key \"${key}\". Expected type ${JSON.stringify(typ)} but got ${JSON.stringify(val)}`);\n    }\n    // console.error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`, );\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(\"Date\", val);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n    }\n    if (typ === false) return;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    // @ts-ignore\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nexport const typeMap: any = {\n    \"MembershipAdditionalInfoModel\": o([\n        { json: \"id\", js: \"id\", typ: u(null, 0) },\n        { json: \"memberId\", js: \"memberID\", typ: u(null, 0) },\n        { json: \"memberInfo\", js: \"memberInfo\", typ: u(null, r(\"MembershipMixedUserModel\")) },\n        { json: \"phone\", js: \"phone\", typ: u(null, \"\") },\n        { json: \"email\", js: \"email\", typ: u(null, \"\") },\n        { json: \"placeOfWork\", js: \"placeOfWork\", typ: u(null, \"\") },\n        { json: \"whatsapp\", js: \"whatsapp\", typ: u(null, \"\") },\n        { json: \"facebook\", js: \"facebook\", typ: u(null, \"\") },\n        { json: \"twitter\", js: \"twitter\", typ: u(null, \"\") },\n        { json: \"instagram\", js: \"instagram\", typ: u(null, \"\") },\n        { json: \"accountBio\", js: \"accountBio\", typ: u(null, \"\") },\n        { json: \"businessHashtag\", js: \"businessHashtag\", typ: u(null, \"\") },\n        { json: \"businessDescription\", js: \"businessDescription\", typ: u(null, \"\") },\n        { json: \"profession\", js: \"profession\", typ: u(null, \"\") },\n        { json: \"website\", js: \"website\", typ: u(null, \"\") },\n        { json: \"postalAddress\", js: \"postalAddress\", typ: u(null, \"\") },\n        { json: \"digitalAddress\", js: \"digitalAddress\", typ: u(null, \"\") },\n        { json: \"dateJoined\", js: \"dateJoined\", typ: u(null, Date) },\n        { json: \"date\", js: \"date\", typ: u(null, Date) },\n    ], false),\n    \"MembershipMixedUserModel\": mmumTypeMap['MembershipMixedUserModel'],\n    \"GroupingsMemberCategoryModel\": mmumTypeMap['GroupingsMemberCategoryModel'],\n    \"BranchInfo\": mmumTypeMap['BranchInfo'],\n    \"GroupingsOrganizationTypeModel\": mmumTypeMap['GroupingsOrganizationTypeModel'],\n    \"Certificate\": mmumTypeMap['Certificate'],\n    \"Attachment\": mmumTypeMap['Attachment'],\n    \"FolderID\": mmumTypeMap['FolderID'],\n    \"RegionInfo\": mmumTypeMap['RegionInfo'],\n    \"CountryInfo\": mmumTypeMap['CountryInfo'],\n    \"DistrictConstituencyElectoralAreaInfo\": mmumTypeMap['DistrictConstituencyElectoralAreaInfo'],\n};\n"],"names":["Convert","static","json","transform","JSON","parse","r","jsonToJSProps","value","stringify","jsToJSONProps","typ","undefined","jsonToJS","map","props","forEach","p","key","js","jsToJSON","val","getProps","ref","typeMap","Array","isArray","cases","indexOf","transformEnum","hasOwnProperty","typs","l","length","i","_","transformUnion","unionMembers","el","transformArray","arrayItems","additional","result","Object","getOwnPropertyNames","prop","v","prototype","call","transformObject","invalidValue","Date","d","isNaN","valueOf","transformDate","transformPrimitive","u","o","name"],"sourceRoot":""}