{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_addons_interfaces_attendance_meeting_event_member_member_ind_ts-src_addons_interfaces_att-3b9de0.js","mappings":"uSAEO,MAAMA,EAyCXC,gBAAgBC,GACd,MAAMC,EAAQ,IAAIH,EAwClB,OAvCAG,EAAMC,GAAKF,EAAKE,GAChBD,EAAME,SAAWC,OAAOC,MAAML,EAAKG,UAAY,EAAAG,cAAA,SAAuBN,EAAKG,UAAYC,OAAOJ,EAAKG,UACnGF,EAAMM,UAAYP,EAAKO,UACvBN,EAAMO,WAAaR,EAAKQ,WACxBP,EAAMQ,QAAUT,EAAKS,QACrBR,EAAMS,OAASV,EAAKU,OACpBT,EAAMU,eAAiBX,EAAKW,eAC5BV,EAAMW,MAAQZ,EAAKY,MACnBX,EAAMY,MAAQb,EAAKa,MACnBZ,EAAMa,YAAcd,EAAKc,YACzBb,EAAMc,SAAWf,EAAKe,SACtBd,EAAMe,YAAchB,EAAKgB,YACzBf,EAAMgB,mBAAqBjB,EAAKiB,mBAChChB,EAAMiB,cAAgBlB,EAAKkB,cAC3BjB,EAAMkB,OAASnB,EAAKmB,OACpBlB,EAAMmB,SAAWpB,EAAKoB,SACtBnB,EAAMoB,aAAerB,EAAKqB,aAC1BpB,EAAMqB,cAAgBtB,EAAKsB,cAC3BrB,EAAMsB,UAAYvB,EAAKuB,UACvBtB,EAAMuB,SAAWxB,EAAKwB,SACtBvB,EAAMwB,sBAAwBzB,EAAKyB,sBACnCxB,EAAMyB,eAAiB1B,EAAK0B,eAC5BzB,EAAM0B,MAAQ3B,EAAK2B,MACnB1B,EAAM2B,OAAS5B,EAAK4B,OACpB3B,EAAM4B,YAAc7B,EAAK6B,YACzB5B,EAAM6B,WAAa9B,EAAK8B,WACxB7B,EAAM8B,KAAO/B,EAAK+B,KAClB9B,EAAM+B,WAAahC,EAAKgC,WACxB/B,EAAMgC,YAAcjC,EAAKiC,YACzBhC,EAAMiC,SAAWlC,EAAKkC,SACtBjC,EAAMkC,SAAWnC,EAAKmC,SACtBlC,EAAMmC,cAAgBpC,EAAKoC,cAC3BnC,EAAMoC,sBAAwBrC,EAAKqC,sBACnCpC,EAAMqC,SAAWtC,EAAKsC,SACtBrC,EAAMsC,UAAYvC,EAAKuC,UACvBtC,EAAMuC,WAAaxC,EAAKwC,WACxBvC,EAAMwC,cAAuC,OAAvBzC,EAAKyC,cAAyB,KAAMC,EAAmBC,SAAS3C,EAAKyC,eAC3FxC,EAAM2C,WAAoC,OAAvB5C,EAAKyC,cAAyB,KAAM,EAAAI,cAAA,SAAuB7C,EAAK4C,YACnF3C,EAAM6C,aAAsC,OAAvB9C,EAAKyC,cAAyB,KAAM,EAAAM,sBAAA,SAA+B/C,EAAK8C,cACtF7C,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GAETC,SAAUC,OAAOC,MAAM4C,KAAK9C,UAAY8C,KAAK9C,SAAS6C,SAAWC,KAAK9C,SACtEI,UAAW0C,KAAK1C,UAChBC,WAAYyC,KAAKzC,WACjBC,QAASwC,KAAKxC,QACdC,OAAQuC,KAAKvC,OACbC,eAAgBsC,KAAKtC,eACrBC,MAAOqC,KAAKrC,MACZC,MAAOoC,KAAKpC,MACZC,YAAamC,KAAKnC,YAClBC,SAAUkC,KAAKlC,SACfC,YAAaiC,KAAKjC,YAClBC,mBAAoBgC,KAAKhC,mBACzBC,cAAe+B,KAAK/B,cACpBC,OAAQ8B,KAAK9B,OACbC,SAAU6B,KAAK7B,SACfC,aAAc4B,KAAK5B,aACnBC,cAAe2B,KAAK3B,cACpBC,UAAW0B,KAAK1B,UAChBC,SAAUyB,KAAKzB,SACfC,sBAAuBwB,KAAKxB,sBAC5BC,eAAgBuB,KAAKvB,eACrBC,MAAOsB,KAAKtB,MACZC,OAAQqB,KAAKrB,OACbC,YAAaoB,KAAKpB,YAClBC,WAAYmB,KAAKnB,WACjBC,KAAMkB,KAAKlB,KACXC,WAAYiB,KAAKjB,WACjBC,YAAagB,KAAKhB,YAClBC,SAAUe,KAAKf,SACfC,SAAUc,KAAKd,SACfC,cAAea,KAAKb,cACpBC,sBAAuBY,KAAKZ,sBAC5BC,SAAUW,KAAKX,SACfC,UAAWU,KAAKV,UAChBC,WAAYS,KAAKT,WACjBC,cAAsC,OAAvBQ,KAAKR,cAAwB,KAAMQ,KAAKR,cAAcO,SACrEJ,WAAgC,OAApBK,KAAKL,WAAqB,KAAMK,KAAKL,WAAWI,SAC5DF,aAAoC,OAAtBG,KAAKH,aAAuB,KAAMG,KAAKH,aAAaE,SAEtE,CAEAE,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,EAGK,MAAMN,EAkBX3C,gBAAgBC,GACd,MAAMC,EAAQ,IAAIyC,EAiBlB,OAhBAzC,EAAMC,GAAKF,EAAKE,GAChBD,EAAMM,UAAYP,EAAKO,UACvBN,EAAMQ,QAAUT,EAAKS,QACrBR,EAAMS,OAASV,EAAKU,OACpBT,EAAMU,eAAiBX,EAAKW,eAC5BV,EAAMa,YAAcd,EAAKc,YACzBb,EAAMW,MAAQZ,EAAKY,MACnBX,EAAMY,MAAQb,EAAKa,MACnBZ,EAAMoD,KAAOrD,EAAKqD,KAClBpD,EAAMqD,UAAYtD,EAAKsD,UACvBrD,EAAMiC,SAAWlC,EAAKkC,SACtBjC,EAAM0B,MAAQ3B,EAAK2B,MACnB1B,EAAM2B,OAAS5B,EAAK4B,OACpB3B,EAAMsD,cAAgBvD,EAAKuD,cAC3BtD,EAAM8B,KAAO/B,EAAK+B,KAClB9B,EAAM+B,WAAahC,EAAKgC,WACjB/B,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GACTK,UAAW0C,KAAK1C,UAChBE,QAASwC,KAAKxC,QACdC,OAAQuC,KAAKvC,OACbC,eAAgBsC,KAAKtC,eACrBG,YAAamC,KAAKnC,YAClBF,MAAOqC,KAAKrC,MACZC,MAAOoC,KAAKpC,MACZwC,KAAMJ,KAAKI,KACXC,UAAWL,KAAKK,UAChBpB,SAAUe,KAAKf,SACfP,MAAOsB,KAAKtB,MACZC,OAAQqB,KAAKrB,OACb2B,cAAeN,KAAKM,cACpBxB,KAAMkB,KAAKlB,KACXC,WAAYiB,KAAKjB,WAErB,CAEAkB,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,E,+ECrMK,MAAMQ,EAwCXzD,gBAAgBC,GACd,MAAMC,EAAQ,IAAIuD,EAyClB,OAxCAvD,EAAMC,GAAKF,EAAKE,GAChBD,EAAME,SAAWC,OAAOC,MAAML,EAAKG,UAAY,EAAAG,cAAA,SAAuBN,EAAKG,UAAYC,OAAOJ,EAAKG,UACnGF,EAAMwD,iBAAmBzD,EAAKyD,iBAC9BxD,EAAMyD,kBAAoB1D,EAAK0D,kBAC/BzD,EAAM0D,iBAAmBC,EAAsBjB,SAAS3C,EAAK2D,kBAC7D1D,EAAM4D,mBAAqB7D,EAAK6D,mBAChC5D,EAAM6D,kBAAoB9D,EAAK8D,kBAC/B7D,EAAM8D,kBAAoB/D,EAAK+D,kBAC/B9D,EAAM+D,oBAAsBhE,EAAKgE,oBACjC/D,EAAMgE,mBAAqBjE,EAAKiE,mBAChChE,EAAMiE,oBAAsBlE,EAAKkE,oBACjCjE,EAAMkE,KAAOnE,EAAKmE,KAClBlE,EAAMmE,mBAAqBpE,EAAKoE,mBAChCnE,EAAMoE,mBAAqBrE,EAAKqE,mBAChCpE,EAAMqE,kBAAoBtE,EAAKsE,kBAC/BrE,EAAMiB,cAAgBlB,EAAKkB,cAC3BjB,EAAMkB,OAASnB,EAAKmB,OACpBlB,EAAMmB,SAAWpB,EAAKoB,SACtBnB,EAAMoB,aAAerB,EAAKqB,aAC1BpB,EAAMqB,cAAgBtB,EAAKsB,cAC3BrB,EAAMsB,UAAYvB,EAAKuB,UACvBtB,EAAMyB,eAAiB1B,EAAK0B,eAC5BzB,EAAM0B,MAAQ3B,EAAK2B,MACnB1B,EAAM2B,OAAS5B,EAAK4B,OACpB3B,EAAM4B,YAAc7B,EAAK6B,YACzB5B,EAAM6B,WAAa9B,EAAK8B,WACxB7B,EAAM8B,KAAO/B,EAAK+B,KAClB9B,EAAM+B,WAAahC,EAAKgC,WACxB/B,EAAMgC,YAAcjC,EAAKiC,YACzBhC,EAAMiC,SAAWlC,EAAKkC,SACtBjC,EAAMkC,SAAWnC,EAAKmC,SACtBlC,EAAMsC,UAAYvC,EAAKuC,UACvBtC,EAAMuC,WAAaxC,EAAKwC,WACxBvC,EAAMwC,cAAgBzC,EAAKyC,cAC3BxC,EAAM2C,WAAa,EAAAC,cAAA,SAAuB7C,EAAK4C,YAC/C3C,EAAM6C,aAAe,EAAAC,sBAAA,SAA+B/C,EAAK8C,cACzD7C,EAAMsE,aAAqC,OAAtBvE,EAAKuE,aAAuB,GAAIvE,EAAKuE,aAAaC,KAAKC,GAC1EC,EAAiB/B,SAAS8B,KAE5BxE,EAAM0E,eAAiB3E,EAAK2E,eACrB1E,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GAETC,SAAUC,OAAOC,MAAM4C,KAAK9C,UAAY8C,KAAK9C,SAAS6C,SAAWC,KAAK9C,SACtEsD,iBAAkBR,KAAKQ,iBACvBC,kBAAmBT,KAAKS,kBACxBC,iBAAkBV,KAAKU,iBAAiBX,SACxCa,mBAAoBZ,KAAKY,mBACzBC,kBAAmBb,KAAKa,kBACxBC,kBAAmBd,KAAKc,kBACxBC,oBAAqBf,KAAKe,oBAC1BC,mBAAoBhB,KAAKgB,mBACzBC,oBAAqBjB,KAAKiB,oBAC1BC,KAAMlB,KAAKkB,KACXC,mBAAoBnB,KAAKmB,mBACzBC,mBAAoBpB,KAAKoB,mBACzBC,kBAAmBrB,KAAKqB,kBACxBpD,cAAe+B,KAAK/B,cACpBC,OAAQ8B,KAAK9B,OACbC,SAAU6B,KAAK7B,SACfC,aAAc4B,KAAK5B,aACnBC,cAAe2B,KAAK3B,cACpBC,UAAW0B,KAAK1B,UAChBG,eAAgBuB,KAAKvB,eACrBC,MAAOsB,KAAKtB,MACZC,OAAQqB,KAAKrB,OACbC,YAAaoB,KAAKpB,YAClBC,WAAYmB,KAAKnB,WACjBC,KAAMkB,KAAKlB,KACXC,WAAYiB,KAAKjB,WACjBC,YAAagB,KAAKhB,YAClBC,SAAUe,KAAKf,SACfC,SAAUc,KAAKd,SACfI,UAAWU,KAAKV,UAChBC,WAAYS,KAAKT,WACjBC,cAAeQ,KAAKR,cACpBG,WAAYK,KAAKL,WAAWI,SAC5BF,aAAcG,KAAKH,aAAaE,SAChCuB,aAAoC,OAAtBtB,KAAKsB,aAAuB,GAAItB,KAAKsB,aAAaC,KAAKC,GAAgBA,EAAYzB,WACjG2B,eAAgB1B,KAAK0B,eAEzB,CAEAzB,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,EAGF,MAAMY,EAUJ7D,gBAAgBC,GACd,MAAMC,EAAQ,IAAI2D,EASlB,OARA3D,EAAMC,GAAKF,EAAKE,GAChBD,EAAM2E,SAAW5E,EAAK4E,SACtB3E,EAAME,SAAWH,EAAKG,SACtBF,EAAM4E,KAAO7E,EAAK6E,KAClB5E,EAAM6E,UAAY9E,EAAK8E,UACvB7E,EAAMsC,UAAYvC,EAAKuC,UACvBtC,EAAMuC,WAAaxC,EAAKwC,WACxBvC,EAAM8B,KAAO/B,EAAK+B,KACX9B,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GACT0E,SAAU3B,KAAK2B,SACfzE,SAAU8C,KAAK9C,SACf0E,KAAM5B,KAAK4B,KACXC,UAAW7B,KAAK6B,UAChBvC,UAAWU,KAAKV,UAChBC,WAAYS,KAAKT,WACjBT,KAAMkB,KAAKlB,KAEf,CAEAmB,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,EAGF,MAAM0B,EAMJ3E,gBAAgBC,GACd,MAAMC,EAAQ,IAAIyE,EAKlB,OAJAzE,EAAMC,GAAKF,EAAKE,GAChBD,EAAM2E,SAAW5E,EAAK4E,SACtB3E,EAAM8E,WAAaC,EAAgBrC,SAAS3C,EAAK+E,YACjD9E,EAAM8B,KAAO/B,EAAK+B,KACX9B,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GACT0E,SAAU3B,KAAK2B,SACfG,WAAY9B,KAAK8B,WAAW/B,SAC5BjB,KAAMkB,KAAKlB,KAEf,CAEAmB,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,EAGF,MAAMgC,EAiBJjF,gBAAgBC,GACd,MAAMC,EAAQ,IAAI+E,EAgBlB,OAfA/E,EAAMC,GAAKF,EAAKE,GAChBD,EAAME,SAAWH,EAAKG,SACtBF,EAAM8E,WAAa/E,EAAK+E,WACxB9E,EAAMgF,SAAWjF,EAAKiF,SACtBhF,EAAMiF,OAASlF,EAAKkF,OACpBjF,EAAMkF,KAAOnF,EAAKmF,KAClBlF,EAAMmF,SAAWC,EAAc1C,SAAS3C,EAAKoF,UAC7CnF,EAAMqF,gBAAkBtF,EAAKsF,gBAC7BrF,EAAM6E,UAAY9E,EAAK8E,UACvB7E,EAAMsC,UAAYvC,EAAKuC,UACvBtC,EAAMuC,WAAaxC,EAAKwC,WACxBvC,EAAMqC,SAAWtC,EAAKsC,SACtBrC,EAAMsF,WAAavF,EAAKuF,WACxBtF,EAAMuF,aAAexF,EAAKwF,aAC1BvF,EAAM8B,KAAO/B,EAAK+B,KACX9B,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GACTC,SAAU8C,KAAK9C,SACf4E,WAAY9B,KAAK8B,WACjBE,SAAUhC,KAAKgC,SACfC,OAAQjC,KAAKiC,OACbC,KAAMlC,KAAKkC,KACXC,SAAUnC,KAAKmC,SAASpC,SACxBsC,gBAAiBrC,KAAKqC,gBACtBR,UAAW7B,KAAK6B,UAChBvC,UAAWU,KAAKV,UAChBC,WAAYS,KAAKT,WACjBF,SAAUW,KAAKX,SACfiD,WAAYtC,KAAKsC,WACjBC,aAAcvC,KAAKuC,aACnBzD,KAAMkB,KAAKlB,KAEf,CAEAmB,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,EAGF,MAAMqC,EAYJtF,gBAAgBC,GACd,MAAMC,EAAQ,IAAIoF,EAWlB,OAVApF,EAAMC,GAAKF,EAAKE,GAChBD,EAAMwF,aAAezF,EAAKyF,aAC1BxF,EAAME,SAAWH,EAAKG,SACtBF,EAAMiC,SAAWlC,EAAKkC,SACtBjC,EAAMyF,OAAS1F,EAAK0F,OACpBzF,EAAM0F,WAAa3F,EAAK2F,WACxB1F,EAAM6E,UAAY9E,EAAK8E,UACvB7E,EAAMsC,UAAYvC,EAAKuC,UACvBtC,EAAMuC,WAAaxC,EAAKwC,WACxBvC,EAAM8B,KAAO/B,EAAK+B,KACX9B,CACT,CAEA+C,SACE,MAAO,CACL9C,GAAI+C,KAAK/C,GACTuF,aAAcxC,KAAKwC,aACnBtF,SAAU8C,KAAK9C,SACf+B,SAAUe,KAAKf,SACfwD,OAAQzC,KAAKyC,OACbC,WAAY1C,KAAK0C,WACjBb,UAAW7B,KAAK6B,UAChBvC,UAAWU,KAAKV,UAChBC,WAAYS,KAAKT,WACjBT,KAAMkB,KAAKlB,KAEf,CAEAmB,WACE,OAAOC,KAAKC,UAAUH,KAAKD,SAC7B,E,q2BC5SK,IAAM4C,EAAN,cAA8B,EAAAC,WACnCC,cAAgBC,QAGT,KAAAC,MAAiB,EAQhB,KAAAC,QAA6B,EAAAC,IAAI,GAYlC,KAAAC,WAAsB,EAGtB,KAAAC,QAAmB,EAGnB,KAAAC,QAAmB,IA7BD,CAadC,WAAOC,GAChBtD,KAAKgD,QAAUM,EACftD,KAAKuD,eACP,CAEWF,aACT,OAAOrD,KAAKgD,OACd,CAWMQ,oB,2HACJ,EAAMA,kBAAiB,WAGnBxD,KAAKmD,OACPnD,KAAKoD,QAAU,GAEfpD,KAAKoD,QAAU,IAEnB,G,CAEAK,uBAAyB,CAEzBC,SACE,OAAO,EAAAT,IAAI;;;YAGHjD,KAAKkD,UAAY,EAAAS,QAAU,EAAAV,IAAI;;wBAEnBjD,KAAK4D;;;YAIjB5D,KAAKqD;;;KAIf,CAEQO,eAAeC,GACrBA,EAAEC,iBAEF9D,KAAK+D,QACP,CAEMC,e,yCAAgB,G,CAEtBC,mBACE,OAAOjE,IACT,GApEA,IAAC,IAAAkE,UAAS,CAAEtC,KAAMzE,S,qDAoBlB,IAAC,IAAA+G,UAAS,CAAEtC,KAAMuC,U,0DAGlB,IAAC,IAAAD,UAAS,CAAEtC,KAAMuC,U,uDAGlB,IAAC,IAAAD,UAAS,CAAEtC,KAAMwC,S,uDA7BPzB,EAAe,IAD3B,IAAA0B,eAAc,oB,2BACF1B,E,uhBCNN,IAAM2B,EAAN,cAA0B,EAAA1B,WAA1B,c,oBAGE,KAAA2B,KAAe,GAGf,KAAAC,MAAgB,GAGhB,KAAAC,UAAoB,EAGpB,KAAAnB,MAAgB,IAGhB,KAAAoB,WAAsB1E,KAAKyE,QA6CpC,CAnCEf,SACE,OAAO,EAAAT,IAAI;;6DAE8CjD,KAAKwE;YACtDxE,KAAK2E;uCACsB3E,KAAKuE,aAAavE,KAAKuE,gBAAgBvE,KAAKyE,SAAU,KAAM;;;KAIjG,CAEYE,aACV,OAAI3E,KAAKyE,SACA,EAAAxB,IAAI;qCACoBjD,KAAKuE,oBAAoBvE,KAAKuE,4BAA4BvE,KAAKwE,kBAAkBxE,KAAK4E;QAG9G,EAAA3B,IAAI;4BACWjD,KAAKuE,oBAAoBvE,KAAKuE,4BAA4BvE,KAAKwE,kBAAkBxE,KAAK4E;OAGhH,CAEQA,aAAaC,GAEnB7E,KAAK0E,WAAaG,EAAkBC,OAAOL,SAE3CzE,KAAK+E,iBAAiB,UAAY/E,KAAKuE,KAAO,MAAMS,SAASC,IAC3DA,EAAM3B,MAAQtD,KAAK0E,WAAY,KAAM,KAAK,GAE9C,CAEAT,mBACE,OAAOjE,IACT,GA1CO,EAAAkF,OAAS,CACd,EAAAC,GAAG;;;;OAhBL,IAAC,IAAAjB,UAAS,CAAEtC,KAAMwC,S,oDAGlB,IAAC,IAAAF,UAAS,CAAEtC,KAAMwC,S,qDAGlB,IAAC,IAAAF,UAAS,CAAEtC,KAAMuC,U,yDAGlB,IAAC,IAAAD,UAAS,CAAEtC,KAAMwC,S,qDAGlB,IAAC,IAAAF,UAAS,CAAEtC,KAAMuC,U,2DAdPG,EAAW,IADvB,IAAAD,eAAc,iBACFC,E,ojBCEN,IAAMc,EAAN,cAA2C,EAAAxC,WAChDC,cAAgBC,QAGR,KAAAuC,eAA0B,CAHT,CAMzB7B,oBACEV,MAAMU,oBACNxD,KAAKsF,mBAEP,CAEA7B,uBAAyB,CAOzBC,SAEE,OAAO,EAAAT,IAAI;;gBAEC,EAAAsC,UAAA,0DAAoEvF,KAAKqF;;;gBAGzE,EAAAE,UAAA,uDAAiEvF,KAAKqF;;;gBAGtE,EAAAE,UAAA,6DAAuEvF,KAAKqF;;;gBAG5E,EAAAE,UAAA,4DAAsEvF,KAAKqF;;;gBAG3E,EAAAE,UAAA,uDAAiEvF,KAAKqF;;;gBAGtE,EAAAE,UAAA,sDAAgEvF,KAAKqF;;;gBAGrE,EAAAE,UAAA,qDAA+DvF,KAAKqF;;;gBAGpE,EAAAE,UAAA,uDAAiEvF,KAAKqF;;;gBAGtE,EAAAE,UAAA,2DAAqEvF,KAAKqF;;;gBAG1E,EAAAE,UAAA,0DAAoEvF,KAAKqF;;;gBAGzE,EAAAE,UAAA,wDAAkEvF,KAAKqF;;;gBAGvE,EAAAE,UAAA,qDAA+DvF,KAAKqF;;KAGlF,CAEArB,eAAiB,CAETsB,oBACN,IAAID,GAAiB,IAAAG,mBAAkB,oBACnCC,EAAqC,OAAnBJ,EAA0BlI,OAAOkI,GAAkB,KACzErF,KAAKqF,eAAiBlI,OAAOC,MAAMqI,GAAmB,KAAOA,CAE/D,CAEAxB,mBACE,OAAOjE,IACT,GA3DO,EAAAkF,OAAS,CACd,EAAAC,GAAG;;KAZL,IAAC,IAAAjB,UAAS,CAAEtC,KAAMzE,S,8DAHPiI,EAA4B,IADxC,IAAAf,eAAc,oC,2BACFe,E","sources":["webpack://webpackNumbers/./src/addons/interfaces/attendance/meeting_event/member/member/ind.ts","webpack://webpackNumbers/./src/addons/interfaces/attendance/meeting_event/member/member/org.ts","webpack://webpackNumbers/./src/addons/widgets/add_remove_widget/index.ts","webpack://webpackNumbers/./src/addons/widgets/form/new/switch.ts","webpack://webpackNumbers/./src/view/attendance/setup/form/edit/links.ts"],"sourcesContent":["import { BranchIDModel, ClientIDModel, MemberCategoryIDModel } from \"../../schedules/categories\";\r\n\r\nexport class IndividualMemberModel {\r\n  id: number;\r\n  clientId: ClientIDModel | number;\r\n  firstname: string;\r\n  middlename: string;\r\n  surname: string;\r\n  gender: number;\r\n  profilePicture: string;\r\n  phone: string;\r\n  email: string;\r\n  dateOfBirth: string;\r\n  religion: number;\r\n  nationality: string;\r\n  countryOfResidence: string;\r\n  stateProvince: string;\r\n  region: number;\r\n  district: number;\r\n  constituency: number;\r\n  electoralArea: number;\r\n  community: string;\r\n  hometown: string;\r\n  houseNoDigitalAddress: string;\r\n  digitalAddress: string;\r\n  level: number;\r\n  status: number;\r\n  accountType: number;\r\n  memberType: number;\r\n  date: string;\r\n  last_login: string;\r\n  referenceId: string;\r\n  branchId: number;\r\n  editable: boolean;\r\n  profileResume: string;\r\n  profileIdentification: any;\r\n  archived: boolean;\r\n  updatedBy: number;\r\n  updateDate: string;\r\n  updatedByInfo: UpdatedByInfoModel;\r\n  branchInfo: BranchIDModel;\r\n  categoryInfo: MemberCategoryIDModel;\r\n\r\n  static fromJson(json: any): IndividualMemberModel {\r\n    const model = new IndividualMemberModel();\r\n    model.id = json.id;\r\n    model.clientId = Number.isNaN(json.clientId) ? ClientIDModel.fromJson(json.clientId) : Number(json.clientId);\r\n    model.firstname = json.firstname;\r\n    model.middlename = json.middlename;\r\n    model.surname = json.surname;\r\n    model.gender = json.gender;\r\n    model.profilePicture = json.profilePicture;\r\n    model.phone = json.phone;\r\n    model.email = json.email;\r\n    model.dateOfBirth = json.dateOfBirth;\r\n    model.religion = json.religion;\r\n    model.nationality = json.nationality;\r\n    model.countryOfResidence = json.countryOfResidence;\r\n    model.stateProvince = json.stateProvince;\r\n    model.region = json.region;\r\n    model.district = json.district;\r\n    model.constituency = json.constituency;\r\n    model.electoralArea = json.electoralArea;\r\n    model.community = json.community;\r\n    model.hometown = json.hometown;\r\n    model.houseNoDigitalAddress = json.houseNoDigitalAddress;\r\n    model.digitalAddress = json.digitalAddress;\r\n    model.level = json.level;\r\n    model.status = json.status;\r\n    model.accountType = json.accountType;\r\n    model.memberType = json.memberType;\r\n    model.date = json.date;\r\n    model.last_login = json.last_login;\r\n    model.referenceId = json.referenceId;\r\n    model.branchId = json.branchId;\r\n    model.editable = json.editable;\r\n    model.profileResume = json.profileResume;\r\n    model.profileIdentification = json.profileIdentification;\r\n    model.archived = json.archived;\r\n    model.updatedBy = json.updatedBy;\r\n    model.updateDate = json.updateDate;\r\n    model.updatedByInfo = json.updatedByInfo === null ? null: UpdatedByInfoModel.fromJson(json.updatedByInfo);\r\n    model.branchInfo = json.updatedByInfo === null ? null: BranchIDModel.fromJson(json.branchInfo);\r\n    model.categoryInfo = json.updatedByInfo === null ? null: MemberCategoryIDModel.fromJson(json.categoryInfo);\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      //@ts-ignore\r\n      clientId: Number.isNaN(this.clientId) ? this.clientId.toJson() : this.clientId,\r\n      firstname: this.firstname,\r\n      middlename: this.middlename,\r\n      surname: this.surname,\r\n      gender: this.gender,\r\n      profilePicture: this.profilePicture,\r\n      phone: this.phone,\r\n      email: this.email,\r\n      dateOfBirth: this.dateOfBirth,\r\n      religion: this.religion,\r\n      nationality: this.nationality,\r\n      countryOfResidence: this.countryOfResidence,\r\n      stateProvince: this.stateProvince,\r\n      region: this.region,\r\n      district: this.district,\r\n      constituency: this.constituency,\r\n      electoralArea: this.electoralArea,\r\n      community: this.community,\r\n      hometown: this.hometown,\r\n      houseNoDigitalAddress: this.houseNoDigitalAddress,\r\n      digitalAddress: this.digitalAddress,\r\n      level: this.level,\r\n      status: this.status,\r\n      accountType: this.accountType,\r\n      memberType: this.memberType,\r\n      date: this.date,\r\n      last_login: this.last_login,\r\n      referenceId: this.referenceId,\r\n      branchId: this.branchId,\r\n      editable: this.editable,\r\n      profileResume: this.profileResume,\r\n      profileIdentification: this.profileIdentification,\r\n      archived: this.archived,\r\n      updatedBy: this.updatedBy,\r\n      updateDate: this.updateDate,\r\n      updatedByInfo: this.updatedByInfo === null? null: this.updatedByInfo.toJson(),\r\n      branchInfo: this.branchInfo === null? null: this.branchInfo.toJson(),\r\n      categoryInfo: this.categoryInfo === null? null: this.categoryInfo.toJson(),\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n\r\nexport class UpdatedByInfoModel {\r\n  id: number;\r\n  firstname: string;\r\n  surname: string;\r\n  gender: number;\r\n  profilePicture: string;\r\n  dateOfBirth: string;\r\n  phone: string;\r\n  email: string;\r\n  role: number;\r\n  accountId: number;\r\n  branchId: number;\r\n  level: number;\r\n  status: number;\r\n  lastUpdatedBy: number;\r\n  date: string;\r\n  last_login: string;\r\n\r\n  static fromJson(json: any): UpdatedByInfoModel {\r\n    const model = new UpdatedByInfoModel();\r\n    model.id = json.id;\r\n    model.firstname = json.firstname;\r\n    model.surname = json.surname;\r\n    model.gender = json.gender;\r\n    model.profilePicture = json.profilePicture;\r\n    model.dateOfBirth = json.dateOfBirth;\r\n    model.phone = json.phone;\r\n    model.email = json.email;\r\n    model.role = json.role;\r\n    model.accountId = json.accountId;\r\n    model.branchId = json.branchId;\r\n    model.level = json.level;\r\n    model.status = json.status;\r\n    model.lastUpdatedBy = json.lastUpdatedBy;\r\n    model.date = json.date;\r\n    model.last_login = json.last_login;\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      firstname: this.firstname,\r\n      surname: this.surname,\r\n      gender: this.gender,\r\n      profilePicture: this.profilePicture,\r\n      dateOfBirth: this.dateOfBirth,\r\n      phone: this.phone,\r\n      email: this.email,\r\n      role: this.role,\r\n      accountId: this.accountId,\r\n      branchId: this.branchId,\r\n      level: this.level,\r\n      status: this.status,\r\n      lastUpdatedBy: this.lastUpdatedBy,\r\n      date: this.date,\r\n      last_login: this.last_login,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n\r\n","import { BranchIDModel, ClientIDModel, MemberCategoryIDModel } from \"../../schedules/categories\";\r\n\r\nexport class OrganizationMemberModel {\r\n  id: number;\r\n  clientId: ClientIDModel | number;\r\n  organizationName: string;\r\n  contactPersonName: string;\r\n  organizationType: OrganizationTypeModel;\r\n  businessRegistered: boolean;\r\n  organizationPhone: string;\r\n  organizationEmail: string;\r\n  contactPersonGender: number;\r\n  contactPersonPhoto: string;\r\n  dateOfIncorporation: string;\r\n  logo: string;\r\n  contactPersonPhone: string;\r\n  contactPersonEmail: string;\r\n  countryOfBusiness: string;\r\n  stateProvince: string;\r\n  region: number;\r\n  district: number;\r\n  constituency: number;\r\n  electoralArea: number;\r\n  community: string;\r\n  digitalAddress: string;\r\n  level: number;\r\n  status: number;\r\n  accountType: number;\r\n  memberType: number;\r\n  date: string;\r\n  last_login: string;\r\n  referenceId: string;\r\n  branchId: number;\r\n  editable: boolean;\r\n  updatedBy: number;\r\n  updateDate: string;\r\n  updatedByInfo: any;\r\n  branchInfo: BranchIDModel;\r\n  categoryInfo: MemberCategoryIDModel;\r\n  certificates: CertificateModel[];\r\n  identification: string;\r\n\r\n  static fromJson(json: any): OrganizationMemberModel {\r\n    const model = new OrganizationMemberModel();\r\n    model.id = json.id;\r\n    model.clientId = Number.isNaN(json.clientId) ? ClientIDModel.fromJson(json.clientId) : Number(json.clientId);\r\n    model.organizationName = json.organizationName;\r\n    model.contactPersonName = json.contactPersonName;\r\n    model.organizationType = OrganizationTypeModel.fromJson(json.organizationType);\r\n    model.businessRegistered = json.businessRegistered;\r\n    model.organizationPhone = json.organizationPhone;\r\n    model.organizationEmail = json.organizationEmail;\r\n    model.contactPersonGender = json.contactPersonGender;\r\n    model.contactPersonPhoto = json.contactPersonPhoto;\r\n    model.dateOfIncorporation = json.dateOfIncorporation;\r\n    model.logo = json.logo;\r\n    model.contactPersonPhone = json.contactPersonPhone;\r\n    model.contactPersonEmail = json.contactPersonEmail;\r\n    model.countryOfBusiness = json.countryOfBusiness;\r\n    model.stateProvince = json.stateProvince;\r\n    model.region = json.region;\r\n    model.district = json.district;\r\n    model.constituency = json.constituency;\r\n    model.electoralArea = json.electoralArea;\r\n    model.community = json.community;\r\n    model.digitalAddress = json.digitalAddress;\r\n    model.level = json.level;\r\n    model.status = json.status;\r\n    model.accountType = json.accountType;\r\n    model.memberType = json.memberType;\r\n    model.date = json.date;\r\n    model.last_login = json.last_login;\r\n    model.referenceId = json.referenceId;\r\n    model.branchId = json.branchId;\r\n    model.editable = json.editable;\r\n    model.updatedBy = json.updatedBy;\r\n    model.updateDate = json.updateDate;\r\n    model.updatedByInfo = json.updatedByInfo;\r\n    model.branchInfo = BranchIDModel.fromJson(json.branchInfo);\r\n    model.categoryInfo = MemberCategoryIDModel.fromJson(json.categoryInfo);\r\n    model.certificates = json.certificates === null? []: json.certificates.map((certificate: any) =>\r\n      CertificateModel.fromJson(certificate)\r\n    );\r\n    model.identification = json.identification;\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      //@ts-ignore\r\n      clientId: Number.isNaN(this.clientId) ? this.clientId.toJson() : this.clientId,\r\n      organizationName: this.organizationName,\r\n      contactPersonName: this.contactPersonName,\r\n      organizationType: this.organizationType.toJson(),\r\n      businessRegistered: this.businessRegistered,\r\n      organizationPhone: this.organizationPhone,\r\n      organizationEmail: this.organizationEmail,\r\n      contactPersonGender: this.contactPersonGender,\r\n      contactPersonPhoto: this.contactPersonPhoto,\r\n      dateOfIncorporation: this.dateOfIncorporation,\r\n      logo: this.logo,\r\n      contactPersonPhone: this.contactPersonPhone,\r\n      contactPersonEmail: this.contactPersonEmail,\r\n      countryOfBusiness: this.countryOfBusiness,\r\n      stateProvince: this.stateProvince,\r\n      region: this.region,\r\n      district: this.district,\r\n      constituency: this.constituency,\r\n      electoralArea: this.electoralArea,\r\n      community: this.community,\r\n      digitalAddress: this.digitalAddress,\r\n      level: this.level,\r\n      status: this.status,\r\n      accountType: this.accountType,\r\n      memberType: this.memberType,\r\n      date: this.date,\r\n      last_login: this.last_login,\r\n      referenceId: this.referenceId,\r\n      branchId: this.branchId,\r\n      editable: this.editable,\r\n      updatedBy: this.updatedBy,\r\n      updateDate: this.updateDate,\r\n      updatedByInfo: this.updatedByInfo,\r\n      branchInfo: this.branchInfo.toJson(),\r\n      categoryInfo: this.categoryInfo.toJson(),\r\n      certificates: this.certificates === null? []: this.certificates.map((certificate) => certificate.toJson()),\r\n      identification: this.identification,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n\r\nclass OrganizationTypeModel {\r\n  id: number;\r\n  memberId: number;\r\n  clientId: number;\r\n  type: string;\r\n  createdBy: number;\r\n  updatedBy: number;\r\n  updateDate: string;\r\n  date: string;\r\n\r\n  static fromJson(json: any): OrganizationTypeModel {\r\n    const model = new OrganizationTypeModel();\r\n    model.id = json.id;\r\n    model.memberId = json.memberId;\r\n    model.clientId = json.clientId;\r\n    model.type = json.type;\r\n    model.createdBy = json.createdBy;\r\n    model.updatedBy = json.updatedBy;\r\n    model.updateDate = json.updateDate;\r\n    model.date = json.date;\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      memberId: this.memberId,\r\n      clientId: this.clientId,\r\n      type: this.type,\r\n      createdBy: this.createdBy,\r\n      updatedBy: this.updatedBy,\r\n      updateDate: this.updateDate,\r\n      date: this.date,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n\r\nclass CertificateModel {\r\n  id: number;\r\n  memberId: number;\r\n  attachment: AttachmentModel;\r\n  date: string;\r\n\r\n  static fromJson(json: any): CertificateModel {\r\n    const model = new CertificateModel();\r\n    model.id = json.id;\r\n    model.memberId = json.memberId;\r\n    model.attachment = AttachmentModel.fromJson(json.attachment);\r\n    model.date = json.date;\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      memberId: this.memberId,\r\n      attachment: this.attachment.toJson(),\r\n      date: this.date,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n\r\nclass AttachmentModel {\r\n  id: number;\r\n  clientId: number;\r\n  attachment: string;\r\n  filename: string;\r\n  source: string;\r\n  size: string;\r\n  folderId: FolderIdModel;\r\n  fileDescription: string;\r\n  createdBy: number;\r\n  updatedBy: number;\r\n  updateDate: string;\r\n  archived: boolean;\r\n  archivedBy: number;\r\n  archivedDate: string;\r\n  date: string;\r\n\r\n  static fromJson(json: any): AttachmentModel {\r\n    const model = new AttachmentModel();\r\n    model.id = json.id;\r\n    model.clientId = json.clientId;\r\n    model.attachment = json.attachment;\r\n    model.filename = json.filename;\r\n    model.source = json.source;\r\n    model.size = json.size;\r\n    model.folderId = FolderIdModel.fromJson(json.folderId);\r\n    model.fileDescription = json.fileDescription;\r\n    model.createdBy = json.createdBy;\r\n    model.updatedBy = json.updatedBy;\r\n    model.updateDate = json.updateDate;\r\n    model.archived = json.archived;\r\n    model.archivedBy = json.archivedBy;\r\n    model.archivedDate = json.archivedDate;\r\n    model.date = json.date;\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      clientId: this.clientId,\r\n      attachment: this.attachment,\r\n      filename: this.filename,\r\n      source: this.source,\r\n      size: this.size,\r\n      folderId: this.folderId.toJson(),\r\n      fileDescription: this.fileDescription,\r\n      createdBy: this.createdBy,\r\n      updatedBy: this.updatedBy,\r\n      updateDate: this.updateDate,\r\n      archived: this.archived,\r\n      archivedBy: this.archivedBy,\r\n      archivedDate: this.archivedDate,\r\n      date: this.date,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n\r\nclass FolderIdModel {\r\n  id: number;\r\n  parentFolder: any;\r\n  clientId: number;\r\n  branchId: number;\r\n  folder: string;\r\n  folderType: number;\r\n  createdBy: number;\r\n  updatedBy: number;\r\n  updateDate: string;\r\n  date: string;\r\n\r\n  static fromJson(json: any): FolderIdModel {\r\n    const model = new FolderIdModel();\r\n    model.id = json.id;\r\n    model.parentFolder = json.parentFolder;\r\n    model.clientId = json.clientId;\r\n    model.branchId = json.branchId;\r\n    model.folder = json.folder;\r\n    model.folderType = json.folderType;\r\n    model.createdBy = json.createdBy;\r\n    model.updatedBy = json.updatedBy;\r\n    model.updateDate = json.updateDate;\r\n    model.date = json.date;\r\n    return model;\r\n  }\r\n\r\n  toJson(): any {\r\n    return {\r\n      id: this.id,\r\n      parentFolder: this.parentFolder,\r\n      clientId: this.clientId,\r\n      branchId: this.branchId,\r\n      folder: this.folder,\r\n      folderType: this.folderType,\r\n      createdBy: this.createdBy,\r\n      updatedBy: this.updatedBy,\r\n      updateDate: this.updateDate,\r\n      date: this.date,\r\n    };\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this.toJson());\r\n  }\r\n}\r\n","import { LitElement, html, nothing, TemplateResult, } from 'lit';\r\nimport { customElement, property, } from 'lit/decorators.js';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-icon-button';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-list';\r\nimport '@material/mwc-dialog';\r\nimport '@material/mwc-textfield';\r\nimport { stringToHTML } from '@@addons/functions/stringToHTML';\r\n\r\n\r\n@customElement(\"multiple-widgets\")\r\nexport class MultipleWidgets extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  public index?: number = 0;\r\n\r\n  // @property({ type: String })\r\n  // public widget?: string = '';\r\n\r\n  // @property({ type: Object })\r\n  // public widget?: TemplateResult<1> = html``;\r\n\r\n  private _widget: TemplateResult<1> = html``;\r\n\r\n  public set widget(value: TemplateResult<1>) {\r\n    this._widget = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public get widget(): TemplateResult<1> {\r\n    return this._widget;\r\n  }\r\n\r\n  @property({ type: Boolean })\r\n  public no_delete?: boolean = false;\r\n\r\n  @property({ type: Boolean })\r\n  public single?: boolean = false;\r\n\r\n  @property({ type: String })\r\n  public _single?: string = '[]';\r\n\r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // console.log({ \"fetchTypes\": this.fetchTypes });\r\n    if (this.single) {\r\n      this._single = '';\r\n    } else {\r\n      this._single = '[]';\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"container\">\r\n        <header class=\"form-input-container\">\r\n          ${this.no_delete ? nothing : html`\r\n            <mwc-icon-button icon=\"delete_forever\" class=\"danger\"\r\n              @click=\"${this.deleteQuestion}\"></mwc-icon-button>`\r\n          }\r\n        </header>\r\n        <main>\r\n          ${this.widget}\r\n        </main>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private deleteQuestion(e: { preventDefault: () => void; }) {\r\n    e.preventDefault();\r\n\r\n    this.remove();\r\n  }\r\n\r\n  async firstUpdated() {}\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import { LitElement, html, css } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport '@material/mwc-formfield';\r\nimport '@material/mwc-switch';\r\n\r\n@customElement('switch-input')\r\nexport class SwitchInput extends LitElement {\r\n\r\n  @property({ type: String })\r\n  public name: string = \"\";\r\n\r\n  @property({ type: String })\r\n  public label: string = \"\";\r\n\r\n  @property({ type: Boolean })\r\n  public selected: boolean = false;\r\n\r\n  @property({ type: String })\r\n  public value: string = \"1\";\r\n\r\n  @property({ type: Boolean })\r\n  public isSelected: boolean = this.selected;\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: block;\r\n      }\r\n    `\r\n  ];\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"w-full !py-4 px-2 !flex !justify-between border border-gray-400 rounded-md\">\r\n        <mwc-formfield class=\"w-full text-gray-400\" label=\"${this.label}\" alignEnd spaceBetween>\r\n          ${this.switch}\r\n          <input type=\"hidden\" name=\"${this.name}\" id=\"${this.name}\" value=\"${this.selected? 'on': 'off'}\" />\r\n        </mwc-formfield>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private get switch() {\r\n    if (this.selected) {\r\n      return html`\r\n        <mwc-switch selected name=\"${this.name}-switch\" id=\"${this.name}-switch\"  ariaLabel=\"${this.label}\" @click=\"${this.switchAction}\"></mwc-switch>\r\n      `;\r\n    } else {\r\n      return html`\r\n        <mwc-switch name=\"${this.name}-switch\" id=\"${this.name}-switch\"  ariaLabel=\"${this.label}\" @click=\"${this.switchAction}\"></mwc-switch>\r\n      `;\r\n    }\r\n  }\r\n\r\n  private switchAction(switchActionEvent: { target: { selected: boolean; value: string; }; }) {\r\n    // console.log({switchActionEvent});\r\n    this.isSelected = switchActionEvent.target.selected;\r\n    // console.log({\"this.isSelected\": this.isSelected});\r\n    this.querySelectorAll('[name=\"' + this.name + '\"]').forEach((input: HTMLInputElement) => {\r\n      input.value = this.isSelected? \"on\": \"off\";\r\n    })\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n","import { LitElement, html, css } from 'lit';\r\nimport { customElement, property, query, queryAll } from 'lit/decorators.js';\r\nimport \"@@addons/widgets/buttons/link-buttons/link-button\";\r\nimport { CONSTANTS } from '@@addons/constants';\r\nimport { urlQueryParamsGet } from '@@addons/functions/url_query_params';\r\n\r\n\r\n@customElement(\"attendance-setup-form-edit-links\")\r\nexport class AttendanceSetupFormEditLinks extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  private meetingEventId?: number = 0;\r\n\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.getMeetingEventId();\r\n\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n   :host { display: block; }\r\n  `\r\n  ];\r\n\r\n  render() {\r\n    // console.log({ \"CONSTANTS.URLS.PDB_CLIENT\": CONSTANTS.URLS.PDB_CLIENT })\r\n    return html`\r\n      <link-button isblockcontent=\"false\" aClass=\"\" raised bClass=\"button primary mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/schedule?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Schedule\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button primary mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/admin?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Admin(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button success mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/attachments?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Attachment(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button success mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/meeting-agendas?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Agenda(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button info mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/break?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Break\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button warning mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/date?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Date(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button danger mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/day?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Day(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button primary mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/group?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Group(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button success mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/sub-group?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Sub-Group(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button info mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/location?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Location\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button warning mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/member?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit Member(s)\"></link-button>\r\n      <link-button isblockcontent=\"false\" aClass=\"\" bClass=\"button danger mr-2\"\r\n        href=\"${CONSTANTS.URLS.PDB_CLIENT}settings/edit/sms?meeting-event-id=${this.meetingEventId}\"\r\n        label=\"Edit SMS\"></link-button>\r\n    `;\r\n  }\r\n\r\n  firstUpdated() { }\r\n\r\n  private getMeetingEventId() {\r\n    let meetingEventId = urlQueryParamsGet('meeting-event-id');\r\n    let _meetingEventId = meetingEventId !== null ? Number(meetingEventId) : null;\r\n    this.meetingEventId = Number.isNaN(_meetingEventId) ? null : _meetingEventId;\r\n    // console.log({ \"this.urlQueryParams\": this.urlQueryParams, \"this.meetingEventId\": this.meetingEventId });\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["IndividualMemberModel","static","json","model","id","clientId","Number","isNaN","ClientIDModel","firstname","middlename","surname","gender","profilePicture","phone","email","dateOfBirth","religion","nationality","countryOfResidence","stateProvince","region","district","constituency","electoralArea","community","hometown","houseNoDigitalAddress","digitalAddress","level","status","accountType","memberType","date","last_login","referenceId","branchId","editable","profileResume","profileIdentification","archived","updatedBy","updateDate","updatedByInfo","UpdatedByInfoModel","fromJson","branchInfo","BranchIDModel","categoryInfo","MemberCategoryIDModel","toJson","this","toString","JSON","stringify","role","accountId","lastUpdatedBy","OrganizationMemberModel","organizationName","contactPersonName","organizationType","OrganizationTypeModel","businessRegistered","organizationPhone","organizationEmail","contactPersonGender","contactPersonPhoto","dateOfIncorporation","logo","contactPersonPhone","contactPersonEmail","countryOfBusiness","certificates","map","certificate","CertificateModel","identification","memberId","type","createdBy","attachment","AttachmentModel","filename","source","size","folderId","FolderIdModel","fileDescription","archivedBy","archivedDate","parentFolder","folder","folderType","MultipleWidgets","LitElement","constructor","super","index","_widget","html","no_delete","single","_single","widget","value","requestUpdate","connectedCallback","disconnectedCallback","render","nothing","deleteQuestion","e","preventDefault","remove","firstUpdated","createRenderRoot","property","Boolean","String","customElement","SwitchInput","name","label","selected","isSelected","switch","switchAction","switchActionEvent","target","querySelectorAll","forEach","input","styles","css","AttendanceSetupFormEditLinks","meetingEventId","getMeetingEventId","CONSTANTS","urlQueryParamsGet","_meetingEventId"],"sourceRoot":""}