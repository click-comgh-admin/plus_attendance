{"version":3,"file":"../../production_public/assets/v2/dev-files/js/src_assets_styles_views_attendance_setup_form_scss-src_assets_styles_views_widget_simple-tabl-cf1308.js","mappings":"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","sources":["webpack://webpackNumbers/./src/addons/functions/https/https_swal_error_format.ts","webpack://webpackNumbers/./src/addons/functions/login/main.ts","webpack://webpackNumbers/./src/addons/functions/url_query_params/index.ts","webpack://webpackNumbers/./src/addons/network/attendance/setup/time/assign_multiple.ts","webpack://webpackNumbers/./src/addons/network/attendance/setup/time/patch.ts","webpack://webpackNumbers/./src/addons/widgets/datatables/index.ts"],"sourcesContent":["export const __swalStyle = `<style>#swal2-validation-message{\r\n  display: flex !important;\r\n  justify-content: flex-start !important;\r\n  font-weight: 600 !important;\r\n}#swal2-validation-message>ul{list-style: inside !important; margin: 0 !important;}</style>`;\r\nexport const https_swal_error_format = (error: any, addStyle = true) => {\r\n  // console.log({\"errorerror\": error})\r\n  if (Array.isArray(error)) {\r\n    const style = addStyle ? __swalStyle : ``;\r\n    let errorMsg = style + \"<ul>\";\r\n    const DATAS: Array<any> = error\r\n    // console.log({ DATAS });\r\n\r\n    DATAS.forEach((data) => {\r\n      // console.log({ data });\r\n      if (typeof data === \"string\") {\r\n        errorMsg += `<li>${data}</li>` + \"\\n\";\r\n      } else {\r\n        errorMsg += `<li>${data.error}</li>` + \"\\n\";\r\n      }\r\n\r\n    });\r\n    return errorMsg = errorMsg + \"</ul>\";\r\n  } else {\r\n    throw new Error(\"Unknown error response format\");\r\n  }\r\n}","import { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { base64Decode, base64Encode } from \"@@addons/functions/base64\";\r\nimport { get_cookie, set_cookies, set_cookies_minutes } from \"@@addons/functions/cookies\";\r\nimport { LoginTokenType_I, } from '@@addons/interfaces/network_calls/login/login_token';\r\n\r\nconst get_differences = (date: Date) => {\r\n  const now = new Date();\r\n  const msBetweenDates = Math.abs(date.getTime() - now.getTime());\r\n  const hoursBetweenDated = msBetweenDates / (60 * 60 * 1000);\r\n  // console.log({ msBetweenDates, hoursBetweenDated, });\r\n  if (hoursBetweenDated < 24) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nexport const verifyToken = async (email: string, _id_: string, type: LoginTokenType_I) => {\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/verify-token',\r\n    cookieName = type,\r\n    token = get_cookie(cookieName),\r\n    userInfo = JSON.stringify({ \"token\": base64Decode(token) }),\r\n    formData = userInfo;\r\n  const cookieDate = new Date(get_cookie(cookieName + \"_date\"));\r\n  // console.log({ \"force_check, now\": get_differences(cookieDate) });\r\n  const force_check = get_differences(cookieDate);\r\n\r\n  if (!force_check) {\r\n    await http(url, {\r\n      method: \"POST\",\r\n      body: formData,\r\n    }, true).then(async (response) => {\r\n      // console.log({ response: response });\r\n      if (response.jsonData.token & response.jsonData.user & response.jsonData.expiry) {\r\n        // console.log({\"valid token\": true, \"response.jsonData.token\": response.jsonData.token})\r\n        const token = base64Encode(String(response.jsonData.token));\r\n        set_cookies(cookieName, token, 10);\r\n        set_cookies_minutes(cookieName + \"_date\", new Date().toUTCString(), 10);\r\n        // console.log({ \"response.token\": response.token });\r\n      } else {\r\n        // console.log({\"valid token\": false, \"response.jsonData.token\": response.jsonData.token})\r\n        await generateNewToken(email, _id_, type);\r\n      }\r\n    });\r\n  } else {\r\n    return token;\r\n  }\r\n}\r\n\r\nconst generateNewToken = async (email: string, _id_: string, type: LoginTokenType_I) => {\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'clients/login-id',\r\n    cookieName = type,\r\n    userInfo = JSON.stringify({ \"email\": email, \"id\": _id_ }),\r\n    formData = userInfo;\r\n\r\n  await http(url, {\r\n    method: \"POST\",\r\n    body: formData,\r\n  }, true).then((response) => {\r\n    // console.log({ response: response });\r\n    if (response.jsonData.token) {\r\n      const token = base64Encode(String(response.jsonData.token));\r\n      set_cookies(cookieName, token, 10);\r\n      set_cookies_minutes(cookieName + \"_date\", new Date().toUTCString(), 10);\r\n      // console.log({ \"response.token\": response.token });\r\n    }\r\n\r\n  });\r\n}\r\nexport const tokenLogin = async (email: string, id: Number, type: LoginTokenType_I) => {\r\n  const _id_ = base64Encode(String(id)),\r\n    cookieName = type;\r\n  // console.log({\"_id__id__id_\": _id_});\r\n  // console.log({ email, id });\r\n  // @ts-ignore\r\n  window['supersecret'] = { unknowable: { ops: { email: email, id: _id_, cookieName: cookieName } } };\r\n  const _get_cookie = get_cookie(cookieName);\r\n  // console.log({ _get_cookie });\r\n\r\n  if (_get_cookie == '') {\r\n    await generateNewToken(email, _id_, type);\r\n  } else {\r\n    await verifyToken(email, _id_, type);\r\n  }\r\n};","export const urlQueryParams = () => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n  return params;\r\n}\r\nexport const urlQueryParamsGet = (query: string) => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = Object.fromEntries(urlSearchParams.entries());\r\n  let value: string = null;\r\n  for (const key in params) {\r\n    if (key === query) {\r\n      value = params[key]\r\n    }\r\n  }\r\n  return value;\r\n}\r\nexport const urlQueryParamsGetAll = (query: string) => {\r\n  const urlSearchParams = new URLSearchParams(window.location.search);\r\n  const params = urlSearchParams.getAll(query);\r\n  return params;\r\n}\r\n\r\nexport const urlQueryParamsJoin = (object:{\r\n  [k: string]: string;\r\n}) => {\r\n  let urlStr: string = \"\";\r\n  let index = 0;\r\n  for (const key in object) {\r\n    index += 1; \r\n    urlStr += `${(index > 1) ? \"&\": \"\"}${key}=${object[key]}`;\r\n  }\r\n  return urlStr;\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\nimport { MeetingEventTimeFormModel } from \"@@addons/interfaces/attendance/meeting_event/schedules/times\";\r\n\r\n\r\nexport async function POST_AttendanceAddScheduleTimesBulk(timeData: MeetingEventTimeFormModel,): Promise<any> {\r\n\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n  // console.log({_get_cookie});\r\n  console.log({ timeData });\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/time/bulk',\r\n    formData = {\r\n      \"meetingEventId\": timeData.meetingEventId,\r\n      \"times\": timeData.times.map(time => {\r\n        return {\r\n          \"startTime\": time.startTime ?? \"\",\r\n          \"endTime\": time.endTime ?? \"\"\r\n        }\r\n      }),\r\n    };\r\n\r\n  return Swal.fire({\r\n    title: 'Add Extra Time(s)?',\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, true, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        try {\r\n          const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false);\r\n          return networkCallRes;\r\n        } catch (error) {\r\n          console.error({ error });\r\n          let errorHttp = HTTP;\r\n          errorHttp['error'] = error;\r\n          const networkCallRes = new NetWorkCallResponses(\"post\", errorHttp, true);\r\n          networkCallRes.postForm\r\n          return networkCallRes;\r\n        }\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: '#f97817',\r\n        confirmButtonColor: '#f97817',\r\n      });\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import Swal from \"sweetalert2\";\r\nimport { CONSTANTS } from \"@@addons/constants\";\r\nimport { http } from \"@@addons/functions/https/http\";\r\nimport { NetWorkCallResponses } from \"@@addons/classes/network_calls/response\";\r\nimport { NetworkCallResponse_I } from \"@@addons/interfaces/network_calls/response\";\r\nimport { https_swal_error_format } from \"@@addons/functions/https/https_swal_error_format\";\r\nimport { getUserLoginInfoCookie } from \"@@addons/functions/login\";\r\n\r\n\r\nexport async function PATCH_AttendanceAddScheduleTime(ID: Number, startTime: String, endTime: String): Promise<any> {\r\n  const _get_cookie = getUserLoginInfoCookie();\r\n\r\n  const url = CONSTANTS.URLS.AKWAABA_API_BASE_URL + 'attendance/meeting-event/time/' + ID,\r\n    formData = {\r\n      \"startTime\": startTime ?? \"\",\r\n      \"endTime\": endTime ?? \"\"\r\n    };\r\n\r\n  return Swal.fire({\r\n    title: 'Update Time Data?',\r\n    // text: \"You won't be able to revert this!\",\r\n    icon: 'info',\r\n    iconColor: '#f97817',\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    confirmButtonColor: '#f97817',\r\n    cancelButtonColor: '#ddd',\r\n    reverseButtons: true,\r\n    showLoaderOnConfirm: true,\r\n    backdrop: true,\r\n    preConfirm: async (login) => {\r\n      return await http(url, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n          Authorization: \"Token \" + _get_cookie.token\r\n        }\r\n      }, true, false).then((HTTP) => {\r\n        // console.log({ HTTP });\r\n\r\n        const networkCallRes = new NetWorkCallResponses(\"post\", HTTP, false);\r\n        const _RESPONSE = networkCallRes.response;\r\n        // console.log({\"_RESPONSE\": _RESPONSE});\r\n        if ('nameError' in _RESPONSE && 'unknownError' in _RESPONSE) {\r\n          if (_RESPONSE.unknownError.length > 0) {\r\n            // console.log({ \"_RESPONSE.unknownError\": _RESPONSE.unknownError });\r\n\r\n            let errors: Array<{ error: string }> = [];\r\n            _RESPONSE.unknownError.forEach(e => {\r\n              const _errors = e.errors;\r\n              _errors.forEach(err => {\r\n                let errormsg = { error: e.id + \": \" + err };\r\n                if (e.id === \"non_field_errors\") {\r\n                  errormsg = { error: err };\r\n                }\r\n\r\n                errors.push(errormsg);\r\n              });\r\n            });\r\n\r\n            const res = https_swal_error_format(errors);\r\n            Swal.showValidationMessage(\r\n              `${res}`\r\n            );\r\n          }\r\n        }\r\n        return networkCallRes;\r\n      }).catch(error => {\r\n        Swal.showValidationMessage(\r\n          `${String(error)}`\r\n        );\r\n      });\r\n    },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    // console.log({ result });\r\n    if (result.isConfirmed) {\r\n      let successMsg = \"Success\",\r\n        isSuccess = false;\r\n      const _VALUE = result.value;\r\n      if (_VALUE instanceof Object) {\r\n        const VALUE: NetworkCallResponse_I<unknown> = _VALUE.response;\r\n        successMsg = String(VALUE.message);\r\n\r\n        isSuccess = _VALUE.response.success;\r\n      }\r\n      isSuccess ? Swal.fire({\r\n        title: successMsg,\r\n        icon: isSuccess ? 'success' : 'error',\r\n        iconColor: isSuccess ? '#f97817' : '#dc2626',\r\n        confirmButtonColor: '#f97817',\r\n      }) : null;\r\n      isSuccess ? setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500) : null;\r\n    }\r\n  });\r\n}","import { LitElement, html, css } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport '../../interfaces/datatables';\r\nimport \"../../../assets/styles/views/datatable/main.scss\";\r\n// import * as $ from 'jquery'\r\nimport { CONSTANTS } from '@@addons/constants';\r\n\r\n@customElement('datatables-new')\r\nexport class _DATATABLES_ extends LitElement {\r\n  constructor() { super(); }\r\n\r\n  @property({ type: Number })\r\n  private randomID1: number = Math.floor(Math.random() * 12345);\r\n\r\n  @property({ type: Number })\r\n  private randomID2: number = Math.floor(Math.random() * 678910);\r\n\r\n  @property({ type: String })\r\n  private ID: string = \"datatable\";\r\n\r\n  @property({ type: Object })\r\n  public datatable?: DataTables_Settings_I;\r\n\r\n  @property({ type: Array })\r\n  public dt_head?: DataTables_ColumnSettings_I[];\r\n\r\n  @property({ type: Array })\r\n  public dt_foot?: DataTables_ColumnSettings_I[];\r\n\r\n  @property({ type: Array })\r\n  public dt_body?: DataTables_ColumnSettings_I[][];\r\n\r\n  private _init?: DataTables_Api_I<any>;\r\n\r\n  public set init(value: DataTables_Api_I<any>,) {\r\n    \r\n    let oldVal = this._init;\r\n    this._init = value;\r\n    console.log(\"public set init\", {oldVal, value});\r\n    this.requestUpdate(\"init\", oldVal);\r\n  }\r\n\r\n  public get init(): DataTables_Api_I<any> {\r\n    return this._init;\r\n  }\r\n\r\n  @property()\r\n  public ajaxHeader?: any;\r\n\r\n  // public _ajaxHeader: any = null;\r\n\r\n  // public set ajaxHeader(value: any) {\r\n  //   this._ajaxHeader = value;\r\n  //   this.requestUpdate();\r\n  // }\r\n\r\n  // public get ajaxHeader(): any {\r\n  //   return this._ajaxHeader;\r\n  // }\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // console.log({\"ajaxHeader\": this.ajaxHeader})\r\n\r\n    this.ID = this.randomID1 + \"-\" + this.ID + \"-\" + this.randomID2;\r\n  }\r\n\r\n  disconnectedCallback() { }\r\n  static styles = [\r\n    css`\r\n      :host { display: block; }\r\n      input, select {\r\n        box-shadow: 0 0 0 1px !important;\r\n        padding: 2.5px !important;\r\n        margin: 2.5px !important;\r\n      }\r\n    `\r\n  ];\r\n\r\n  render() {\r\n    // console.log({\"this.ID\": this.ID, \"datatable\": this.datatable});\r\n    return html`\r\n    <table  class=\"align-middle mb-0 table table-borderless table-striped table-hover\" style=\"width:100%\" datatable=\"${this.ID}\">\r\n      <thead>\r\n        <tr>\r\n          ${this.thead()}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n          ${this.tbody()}\r\n      </tbody>\r\n      <tfoot>\r\n        <tr>\r\n          ${this.tfoot()}\r\n        </tr>\r\n      </tfoot>\r\n    </table>\r\n  `;\r\n  }\r\n\r\n  private thead() {\r\n    return html`\r\n      ${this.dt_head.map(head => {\r\n        // console.log({\"headhead\": head});\r\n        \r\n        return html`<th>${head.title}</th>`\r\n      })}\r\n    `;\r\n  }\r\n\r\n  private tbody() {\r\n    return html`\r\n      ${this.dt_body.map(row => {\r\n        // console.log({\"bodybody1\": row});\r\n        \r\n        return html`<tr>${row.map(column => {\r\n          // console.log({\"bodybody2\": column});\r\n          \r\n          return html`<td>${column.title}</td>`\r\n        })}</tr>`\r\n      })}\r\n    `;\r\n  }\r\n\r\n  private tfoot() {\r\n    return html`\r\n    ${this.dt_foot.map(foot => {\r\n      return html`<th>${foot.title}</th>`\r\n    })}\r\n    `;\r\n  }\r\n\r\n  firstUpdated() {\r\n    const table = this.querySelector('[datatable=\"'+this.ID+'\"]');\r\n    \r\n    if (typeof this.datatable.ajax === \"object\") {\r\n      let AJAX = this.datatable.ajax;\r\n      // console.log({ \"typeof AJAX\": typeof AJAX });\r\n      AJAX.headers = {\r\n        \"Access-Control-Allow-Origin\": \"*/*\",\r\n        \"Accept\": \"application/json, text/plain, */*\"\r\n      };\r\n      let _headers = AJAX.headers;\r\n      // for (const header in this.ajaxHeader) {\r\n      //   // console.log({header})\r\n      //   // @ts-ignore\r\n      //   _headers[header] = this.ajaxHeader[header];\r\n      // }\r\n      // console.log({ \"this.ajaxHeader\": this.ajaxHeader })\r\n      for (const key in this.ajaxHeader) {\r\n        if (Object.prototype.hasOwnProperty.call(this.ajaxHeader, key)) {\r\n          const element = this.ajaxHeader[key];\r\n          _headers[key] = element;\r\n        }\r\n      }\r\n      // console.log({ \"_headers\": _headers, $ })\r\n      // for (const iterator of this.ajaxHeader) {\r\n      //   // @ts-ignore\r\n      //   _headers[iterator] = this.ajaxHeader.get(iterator);\r\n      // }\r\n      AJAX.headers = _headers;\r\n      this.datatable.ajax = AJAX;\r\n      // console.log({\"this.datatable\": this.datatable, \"$\": $})\r\n    }\r\n    // console.log({$, table, \"this.datatable\": this.datatable});\r\n    \r\n    // @ts-ignore\r\n    $(table).DataTable(this.datatable);\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n}\r\n"],"names":["__swalStyle","https_swal_error_format","error","addStyle","Array","isArray","errorMsg","forEach","data","Error","verifyToken","email","_id_","type","url","CONSTANTS","URLS","AKWAABA_API_BASE_URL","cookieName","token","get_cookie","formData","JSON","stringify","base64Decode","date","now","Date","Math","abs","getTime","get_differences","http","method","body","then","response","jsonData","user","expiry","base64Encode","String","set_cookies","set_cookies_minutes","toUTCString","generateNewToken","tokenLogin","id","window","unknowable","ops","urlQueryParams","urlSearchParams","URLSearchParams","location","search","Object","fromEntries","entries","urlQueryParamsGet","query","params","value","key","urlQueryParamsGetAll","getAll","urlQueryParamsJoin","object","urlStr","index","POST_AttendanceAddScheduleTimesBulk","timeData","_get_cookie","getUserLoginInfoCookie","console","log","meetingEventId","times","map","time","startTime","endTime","title","icon","iconColor","showCancelButton","confirmButtonText","cancelButtonText","confirmButtonColor","cancelButtonColor","reverseButtons","showLoaderOnConfirm","backdrop","preConfirm","login","headers","Authorization","HTTP","NetWorkCallResponses","errorHttp","networkCallRes","postForm","catch","allowOutsideClick","result","isConfirmed","successMsg","isSuccess","_VALUE","VALUE","message","success","setTimeout","reload","PATCH_AttendanceAddScheduleTime","ID","_RESPONSE","unknownError","length","errors","e","err","errormsg","push","res","_DATATABLES_","LitElement","constructor","super","randomID1","floor","random","randomID2","init","oldVal","this","_init","requestUpdate","connectedCallback","disconnectedCallback","render","html","thead","tbody","tfoot","dt_head","head","dt_body","row","column","dt_foot","foot","firstUpdated","table","querySelector","datatable","ajax","AJAX","_headers","ajaxHeader","prototype","hasOwnProperty","call","element","$","DataTable","createRenderRoot","styles","css","property","Number","DataTables_Settings_I","customElement"],"sourceRoot":""}